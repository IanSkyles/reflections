What happens when you initialize a repository? Why do you need to do it?
	A .git file is created. No commits are made.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area is just a prestage to commiting to a repo. It is a intermediate phase
	It is valuable because it allows you to bundle several file changes into one commit!
	One logical change in  the program might effect multiple files so, it would make sense to
	make them into one commit.

How can you use the staging area to make sure you have one commit per logical
change?
	Use git diff --staged to compare it to the most recent commit.
	Make sure the staging area only adds one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	One situation would be making an easy and a hard mode of a game (eg
	having asteroids break into 2 pieces instead of 3). Another would be 
	having multiple languages of a product, in this case you could have a french
	branch and a master (english) branch! Another situation is a master branch
	that is fully working and for public use and a expermintal branch that tries new
	things out.

How do the diagrams help you visualize the branch structure?
	THey help us understand the branches of our repository. They help understand
	what will show up in log (the parents) and what things will not be saved (eg
	a commit to something not in a branch)

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Git attempts to automatically merge files.
	Any lines from before are kept unless they were deleted in one version. If both branches changed a line, 
	there is a merge conflict. 
	All other lines are added.
	Merging a two branches from an unrelated branch results in a 3 way branch which is not
	desirable.
	Merging branches creates a new commit and updates the head of 
	one of the branches to be the new commit.


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Pros of automatic: Simplifies process, quicker, no need to fiddle with code and
		potentially mess something up during merge.
	Pros of manual: More control, ensures that you can pick what you want to keep,
		allows for efficent code and taking the best of both branches.


Notes
git init
	intializes a repository locally (creates a .git hidden file)
git add
	adds a file to the staging area
git status
	check repository and file statuses
Staging Area : an area where you have added but not commited yet.
	Files waiting to be commited.
Working Directory : the directory you are in. This stage coems before 
the staging area.
git reset 
	Removes a file you accidentally added to the staging area.
	 if you accidentally add lesson_2_reflections.txt, but donâ€™t want 
	 it to be committed yet, run git reset lesson_2_reflections.txt
git diff 
	git diff with no arguments allows you to see the changes between
	the staging area and your working directory!
git diff --staged
	git diff --staged allows you to see the changes between the repository 
	(most recent commit) and the staging area
git branch -d coins
	deletes coins branch
git show commitID
	show differences between id and its parent

git checkout -b new_branch_name
	This is the same as running 
	git branch new_branch_name
	git checkout new_branch_name

merging conflict notes
	git checkout easy-mode
	git merge master easy-mode 
	top sections is your code (easy-mode)
	middle is original (common parent)
	bottom is their code. (master)